shader_type spatial;

uniform sampler2D height_texture;
uniform sampler2D normal_texture;
uniform sampler2D color_texture;
uniform sampler2D splat_texture;
uniform sampler2D mask_texture;
uniform vec2 heightmap_resolution;
uniform mat4 heightmap_inverse_transform;

vec3 unpack_normal(vec3 rgb) {
	return rgb * 2.0 - vec3(1.0);
}

void vertex() {
	vec4 tv = heightmap_inverse_transform * WORLD_MATRIX * vec4(VERTEX, 1);
	vec2 uv = vec2(tv.x,tv.z) / heightmap_resolution;
	float h = texture(height_texture, uv).r;
	VERTEX.y = h;
	UV = uv;
	NORMAL = unpack_normal(texture(normal_texture, UV).rgb);
}

void fragment() {

	float mask = texture(mask_texture, UV).r;
	if(mask > 0.5)
		discard;

	vec3 n = unpack_normal(texture(normal_texture, UV).rgb);
	NORMAL = (INV_CAMERA_MATRIX * (WORLD_MATRIX * vec4(n, 0.0))).xyz;

	// TODO texture splatting

	ALBEDO = texture(color_texture, UV).rgb;
}

