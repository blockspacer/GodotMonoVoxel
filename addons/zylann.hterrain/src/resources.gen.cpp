
// This is a generated file. Do not edit.

#include "resources.gen.h"

const char *s_default_shader_code =
	"shader_type spatial;\n"
	"\n"
	"uniform sampler2D height_texture;\n"
	"uniform sampler2D normal_texture;\n"
	"uniform sampler2D color_texture;\n"
	"uniform sampler2D splat_texture;\n"
	"uniform sampler2D mask_texture;\n"
	"uniform vec2 heightmap_resolution;\n"
	"uniform mat4 heightmap_inverse_transform;\n"
	"\n"
	"vec3 unpack_normal(vec3 rgb) {\n"
	"\treturn rgb * 2.0 - vec3(1.0);\n"
	"}\n"
	"\n"
	"void vertex() {\n"
	"\tvec4 tv = heightmap_inverse_transform * WORLD_MATRIX * vec4(VERTEX, 1);\n"
	"\tvec2 uv = vec2(tv.x,tv.z) / heightmap_resolution;\n"
	"\tfloat h = texture(height_texture, uv).r;\n"
	"\tVERTEX.y = h;\n"
	"\tUV = uv;\n"
	"\tNORMAL = unpack_normal(texture(normal_texture, UV).rgb);\n"
	"}\n"
	"\n"
	"void fragment() {\n"
	"\n"
	"\tfloat mask = texture(mask_texture, UV).r;\n"
	"\tif(mask > 0.5)\n"
	"\t\tdiscard;\n"
	"\n"
	"\tvec3 n = unpack_normal(texture(normal_texture, UV).rgb);\n"
	"\tNORMAL = (INV_CAMERA_MATRIX * (WORLD_MATRIX * vec4(n, 0.0))).xyz;\n"
	"\n"
	"\t// TODO texture splatting\n"
	"\n"
	"\tALBEDO = texture(color_texture, UV).rgb;\n"
	"}\n"
	"\n";
